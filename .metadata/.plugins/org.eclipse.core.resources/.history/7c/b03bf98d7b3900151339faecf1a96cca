// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ch2_datamapping.lesson_02_tgenerate_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Lesson_02_tGenerate Purpose: <br>
 * Description:  <br>
 * @author mr.tdnn@gmail.com
 * @version 6.0.0.20150702_1326
 * @status 
 */
public class Lesson_02_tGenerate implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (outputFile_AddData != null) {

				this.setProperty("outputFile_AddData",
						outputFile_AddData.toString());

			}

			if (outputFile_UserData != null) {

				this.setProperty("outputFile_UserData",
						outputFile_UserData.toString());

			}

		}

		public String outputFile_AddData;

		public String getOutputFile_AddData() {
			return this.outputFile_AddData;
		}

		public String outputFile_UserData;

		public String getOutputFile_UserData() {
			return this.outputFile_UserData;
		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Lesson_02_tGenerate";
	private final String projectName = "CH2_DATAMAPPING";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Lesson_02_tGenerate.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Lesson_02_tGenerate.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tRowGenerator_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_CH2_DATAMAPPING_Lesson_02_tGenerate = new byte[0];
		static byte[] commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String UserID;

		public String getUserID() {
			return this.UserID;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public java.util.Date DateOfBirth;

		public java.util.Date getDateOfBirth() {
			return this.DateOfBirth;
		}

		public Long TimeStamp;

		public Long getTimeStamp() {
			return this.TimeStamp;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Sex;

		public String getSex() {
			return this.Sex;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.UserID == null) ? 0 : this.UserID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.UserID == null) {
				if (other.UserID != null)
					return false;

			} else if (!this.UserID.equals(other.UserID))

				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.UserID = this.UserID;
			other.FirstName = this.FirstName;
			other.LastName = this.LastName;
			other.MiddleName = this.MiddleName;
			other.DateOfBirth = this.DateOfBirth;
			other.TimeStamp = this.TimeStamp;
			other.Age = this.Age;
			other.Sex = this.Sex;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.UserID = this.UserID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate.length) {
					if (length < 1024
							&& commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate.length == 0) {
						commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate = new byte[1024];
					} else {
						commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate, 0,
						length);
				strReturn = new String(
						commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CH2_DATAMAPPING_Lesson_02_tGenerate) {

				try {

					int length = 0;

					this.UserID = readString(dis);

					this.FirstName = readString(dis);

					this.LastName = readString(dis);

					this.MiddleName = readString(dis);

					this.DateOfBirth = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TimeStamp = null;
					} else {
						this.TimeStamp = dis.readLong();
					}

					this.Age = readInteger(dis);

					this.Sex = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.UserID, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.MiddleName, dos);

				// java.util.Date

				writeDate(this.DateOfBirth, dos);

				// Long

				if (this.TimeStamp == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.TimeStamp);
				}

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Sex, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("UserID=" + UserID);
			sb.append(",FirstName=" + FirstName);
			sb.append(",LastName=" + LastName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",DateOfBirth=" + String.valueOf(DateOfBirth));
			sb.append(",TimeStamp=" + String.valueOf(TimeStamp));
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Sex=" + Sex);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.UserID, other.UserID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_CH2_DATAMAPPING_Lesson_02_tGenerate = new byte[0];
		static byte[] commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate = new byte[0];

		public String UserID;

		public String getUserID() {
			return this.UserID;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public java.util.Date DateOfBirth;

		public java.util.Date getDateOfBirth() {
			return this.DateOfBirth;
		}

		public String TimeStamp;

		public String getTimeStamp() {
			return this.TimeStamp;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public Integer Sex;

		public Integer getSex() {
			return this.Sex;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate.length) {
					if (length < 1024
							&& commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate.length == 0) {
						commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate = new byte[1024];
					} else {
						commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate, 0,
						length);
				strReturn = new String(
						commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CH2_DATAMAPPING_Lesson_02_tGenerate) {

				try {

					int length = 0;

					this.UserID = readString(dis);

					this.FirstName = readString(dis);

					this.LastName = readString(dis);

					this.MiddleName = readString(dis);

					this.DateOfBirth = readDate(dis);

					this.TimeStamp = readString(dis);

					this.Age = readInteger(dis);

					this.Sex = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.UserID, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.MiddleName, dos);

				// java.util.Date

				writeDate(this.DateOfBirth, dos);

				// String

				writeString(this.TimeStamp, dos);

				// Integer

				writeInteger(this.Age, dos);

				// Integer

				writeInteger(this.Sex, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("UserID=" + UserID);
			sb.append(",FirstName=" + FirstName);
			sb.append(",LastName=" + LastName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",DateOfBirth=" + String.valueOf(DateOfBirth));
			sb.append(",TimeStamp=" + TimeStamp);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Sex=" + String.valueOf(Sex));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_1 = 0;
		


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1=context.outputFile_UserData + "UserData.xlsx";
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_1.setSheet("User Data");
		xlsxTool_tFileOutputExcel_1.setAppend(false,false);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,0,false);
		
		xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		
		if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UserID");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FirstName");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("LastName");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("MiddleName");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("DateOfBirth");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("TimeStamp");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Age");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Sex");
		
		nb_line_tFileOutputExcel_1++; 
		
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	int Age;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";

	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1000;


class tRowGenerator_1Randomizer {
	public String getRandomUserID() {
		
		return String.format("%04d", Numeric.sequence("s1",1,1)) ;
		
	}
	public String getRandomFirstName() {
		
		return TalendDataGenerator.getFirstName();
		
	}
	public String getRandomLastName() {
		
		return TalendDataGenerator.getLastName();
		
	}
	public String getRandomMiddleName() {
		
		return TalendDataGenerator.getFirstName();
		
	}
	public java.util.Date getRandomDateOfBirth() {
		
		return TalendDate.getRandomDate("1990-01-01" ,"2015-12-31" );
		
	}
	public String getRandomTimeStamp() {
		
		return TalendDate.formatDate("yyyyMMddHHmmss" ,TalendDate.getRandomDate("1900-01-01", "2015-12-31")) + (String.format("%02d", Numeric.random(0,23)) + String.format("%02d", Numeric.random(0,59)) + String.format("%02d", Numeric.random(0,59))) );
		
	}
	public Integer getRandomAge() {
		 
		return null ;
		
	}
	public Integer getRandomSex() {
		
		return Numeric.random(0 ,1 );
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row1.UserID = randtRowGenerator_1.getRandomUserID();
		row1.FirstName = randtRowGenerator_1.getRandomFirstName();
		row1.LastName = randtRowGenerator_1.getRandomLastName();
		row1.MiddleName = randtRowGenerator_1.getRandomMiddleName();
		row1.DateOfBirth = randtRowGenerator_1.getRandomDateOfBirth();
		row1.TimeStamp = randtRowGenerator_1.getRandomTimeStamp();
		row1.Age = randtRowGenerator_1.getRandomAge();
		row1.Sex = randtRowGenerator_1.getRandomSex();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.Age = (int) TalendDate.diffDateIgnoreDST(TalendDate.parseDate("yyyy-MM-dd", TalendDate.getDate("yyyy-MM-dd")), row1.DateOfBirth , "yyyy") ;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.UserID = row1.UserID;
out1_tmp.FirstName = row1.FirstName;
out1_tmp.LastName = row1.LastName;
out1_tmp.MiddleName = row1.MiddleName;
out1_tmp.DateOfBirth = row1.DateOfBirth;
out1_tmp.TimeStamp = Long.getLong(row1.TimeStamp) ;
out1_tmp.Age = Var.Age ;
out1_tmp.Sex = row1.Sex == 0 ? "F" : "M" ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

			//out1
			//out1


			
				if(execStat){
					runStat.updateStatOnConnection("out1"+iterateId,1, 1);
				} 
			

		

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(out1.UserID != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out1.UserID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out1.FirstName != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out1.FirstName));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out1.LastName != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out1.LastName));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out1.MiddleName != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out1.MiddleName));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out1.DateOfBirth != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(out1.DateOfBirth, "yyyy-MM-dd");
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out1.TimeStamp != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(out1.TimeStamp)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out1.Age != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(out1.Age)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out1.Sex != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out1.Sex));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */

} // End of branch "out1"







	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tRowGenerator_2Process(globalMap);



/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("out1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_CH2_DATAMAPPING_Lesson_02_tGenerate = new byte[0];
		static byte[] commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate = new byte[0];

		public String UserInfoID;

		public String getUserInfoID() {
			return this.UserInfoID;
		}

		public String UserID;

		public String getUserID() {
			return this.UserID;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String PostCode;

		public String getPostCode() {
			return this.PostCode;
		}

		public String HPhone;

		public String getHPhone() {
			return this.HPhone;
		}

		public String MPhone;

		public String getMPhone() {
			return this.MPhone;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate.length) {
					if (length < 1024
							&& commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate.length == 0) {
						commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate = new byte[1024];
					} else {
						commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate, 0,
						length);
				strReturn = new String(
						commonByteArray_CH2_DATAMAPPING_Lesson_02_tGenerate, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CH2_DATAMAPPING_Lesson_02_tGenerate) {

				try {

					int length = 0;

					this.UserInfoID = readString(dis);

					this.UserID = readString(dis);

					this.Country = readString(dis);

					this.City = readString(dis);

					this.PostCode = readString(dis);

					this.HPhone = readString(dis);

					this.MPhone = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.UserInfoID, dos);

				// String

				writeString(this.UserID, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.PostCode, dos);

				// String

				writeString(this.HPhone, dos);

				// String

				writeString(this.MPhone, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("UserInfoID=" + UserInfoID);
			sb.append(",UserID=" + UserID);
			sb.append(",Country=" + Country);
			sb.append(",City=" + City);
			sb.append(",PostCode=" + PostCode);
			sb.append(",HPhone=" + HPhone);
			sb.append(",MPhone=" + MPhone);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.outputFile_AddData + "UserAddData.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				String[] headColutFileOutputDelimited_1 = new String[7];
				class CSVBasicSet_tFileOutputDelimited_1 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_1[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_1 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_1[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_1 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_1[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_1[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_1 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
				csvSettings_tFileOutputDelimited_1.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_1,
												false), "ISO-8859-15")));
				CsvWritertFileOutputDelimited_1
						.setSeparator(csvSettings_tFileOutputDelimited_1
								.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_1
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_1.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_1.getRowDelim());
				}
				if (filetFileOutputDelimited_1.length() == 0) {
					headColutFileOutputDelimited_1[0] = "UserInfoID";
					headColutFileOutputDelimited_1[1] = "UserID";
					headColutFileOutputDelimited_1[2] = "Country";
					headColutFileOutputDelimited_1[3] = "City";
					headColutFileOutputDelimited_1[4] = "PostCode";
					headColutFileOutputDelimited_1[5] = "HPhone";
					headColutFileOutputDelimited_1[6] = "MPhone";
					CsvWritertFileOutputDelimited_1
							.writeNext(headColutFileOutputDelimited_1);
					CsvWritertFileOutputDelimited_1.flush();
				}
				CsvWritertFileOutputDelimited_1
						.setEscapeChar(csvSettings_tFileOutputDelimited_1
								.getEscapeChar());
				CsvWritertFileOutputDelimited_1
						.setQuoteChar(csvSettings_tFileOutputDelimited_1
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_1
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_1",
						CsvWritertFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tRowGenerator_2 begin ] start
				 */

				ok_Hash.put("tRowGenerator_2", false);
				start_Hash.put("tRowGenerator_2", System.currentTimeMillis());

				currentComponent = "tRowGenerator_2";

				int tos_count_tRowGenerator_2 = 0;

				int nb_line_tRowGenerator_2 = 0;
				int nb_max_row_tRowGenerator_2 = 500;

				class tRowGenerator_2Randomizer {
					public String getRandomUserInfoID() {

						return String.format("%04d",
								Numeric.sequence("s2", 0, 100));

					}

					public String getRandomUserID() {

						return String.format("%04d",
								Numeric.sequence("s3", 1, 1));

					}

					public String getRandomCountry() {

						return "US";

					}

					public String getRandomCity() {

						return TalendDataGenerator.getUsCity();

					}

					public String getRandomPostCode() {

						return String
								.format("%04d", Numeric.random(1000, 9999));

					}

					public String getRandomHPhone() {

						return String.format("%03d", Numeric.random(0, 999))
								+ String.format("%03d", Numeric.random(0, 999))
								+ String.format("%04d", Numeric.random(0, 999));

					}

					public String getRandomMPhone() {

						return String.format("%03d", Numeric.random(0, 999))
								+ String.format("%03d", Numeric.random(0, 999))
								+ String.format("%04d", Numeric.random(0, 999));

					}
				}
				tRowGenerator_2Randomizer randtRowGenerator_2 = new tRowGenerator_2Randomizer();

				for (int itRowGenerator_2 = 0; itRowGenerator_2 < nb_max_row_tRowGenerator_2; itRowGenerator_2++) {
					row2.UserInfoID = randtRowGenerator_2.getRandomUserInfoID();
					row2.UserID = randtRowGenerator_2.getRandomUserID();
					row2.Country = randtRowGenerator_2.getRandomCountry();
					row2.City = randtRowGenerator_2.getRandomCity();
					row2.PostCode = randtRowGenerator_2.getRandomPostCode();
					row2.HPhone = randtRowGenerator_2.getRandomHPhone();
					row2.MPhone = randtRowGenerator_2.getRandomMPhone();
					nb_line_tRowGenerator_2++;

					/**
					 * [tRowGenerator_2 begin ] stop
					 */

					/**
					 * [tRowGenerator_2 main ] start
					 */

					currentComponent = "tRowGenerator_2";

					tos_count_tRowGenerator_2++;

					/**
					 * [tRowGenerator_2 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 main ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					// row2
					// row2

					if (execStat) {
						runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
					}

					String[] rowtFileOutputDelimited_1 = new String[7];
					rowtFileOutputDelimited_1[0] = row2.UserInfoID == null ? null
							: row2.UserInfoID;
					rowtFileOutputDelimited_1[1] = row2.UserID == null ? null
							: row2.UserID;
					rowtFileOutputDelimited_1[2] = row2.Country == null ? null
							: row2.Country;
					rowtFileOutputDelimited_1[3] = row2.City == null ? null
							: row2.City;
					rowtFileOutputDelimited_1[4] = row2.PostCode == null ? null
							: row2.PostCode;
					rowtFileOutputDelimited_1[5] = row2.HPhone == null ? null
							: row2.HPhone;
					rowtFileOutputDelimited_1[6] = row2.MPhone == null ? null
							: row2.MPhone;
					nb_line_tFileOutputDelimited_1++;
					resourceMap.put("nb_line_tFileOutputDelimited_1",
							nb_line_tFileOutputDelimited_1);
					CsvWritertFileOutputDelimited_1
							.writeNext(rowtFileOutputDelimited_1);

					tos_count_tFileOutputDelimited_1++;

					/**
					 * [tFileOutputDelimited_1 main ] stop
					 */

					/**
					 * [tRowGenerator_2 end ] start
					 */

					currentComponent = "tRowGenerator_2";

				}
				globalMap.put("tRowGenerator_2_NB_LINE",
						nb_line_tRowGenerator_2);

				ok_Hash.put("tRowGenerator_2", true);
				end_Hash.put("tRowGenerator_2", System.currentTimeMillis());

				/**
				 * [tRowGenerator_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (CsvWritertFileOutputDelimited_1 != null) {
					CsvWritertFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRowGenerator_2 finally ] start
				 */

				currentComponent = "tRowGenerator_2";

				/**
				 * [tRowGenerator_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_1");

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Lesson_02_tGenerate Lesson_02_tGenerateClass = new Lesson_02_tGenerate();

		int exitCode = Lesson_02_tGenerateClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Lesson_02_tGenerate.class
					.getClassLoader().getResourceAsStream(
							"ch2_datamapping/lesson_02_tgenerate_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.outputFile_AddData = (String) context
					.getProperty("outputFile_AddData");
			context.outputFile_UserData = (String) context
					.getProperty("outputFile_UserData");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("outputFile_AddData")) {
				context.outputFile_AddData = (String) parentContextMap
						.get("outputFile_AddData");
			}
			if (parentContextMap.containsKey("outputFile_UserData")) {
				context.outputFile_UserData = (String) parentContextMap
						.get("outputFile_UserData");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRowGenerator_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRowGenerator_1) {
			globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", -1);

			e_tRowGenerator_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Lesson_02_tGenerate");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 67771 characters generated by Talend Open Studio for ESB on the August 2,
 * 2015 6:04:02 PM PDT
 ************************************************************************************************/
